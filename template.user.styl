/* ==UserStyle==
@name           <template> Themeable
@namespace      gluton.dev
@version        1.0.0
@description    <template> style composed entirely from 3 base colors
@author         Gluton

@preprocessor	stylus

@var	color	themeColor			"Theme Color"		#00ed8b
@var	color	backgroundColor		"Background Color"	#141414
@var	color	textColor			"Text Color"		#e4e4e4

==/UserStyle== */

i = !important
t = transparent
thm = themecolor
_ = null

root = unquote("^[0]")

selector($index = 0) {
    return s("^[%s..%s]", $index - 1, $index - 1)
}
selectors-to($index) {
    return s("^[%s]", $index)
}
between-selectors($selector, $betweenselectorindices = 0) {
    if length($betweenselectorindices) > 1 {
        return s("^[%s..%s]%s^[%s..%s]", 0, $betweenselectorindices[0] - 1, unquote($selector), last($betweenselectorindices) - 1, -1)
    } else {
        return s("^[%s..%s]%s^[%s..%s]", 0, $betweenselectorindices - 2, unquote($selector), $betweenselectorindices - 1, -1)
    }
}

c($color = thm) {
    return -colorize($color) unless current-property is a 'null'
    filter: -colorize($color)
}
-colorize($value, $opacity = 1) {
    $red = red($value) / 255
    $green = green($value) / 255
    $blue = blue($value) / 255
    if (unit($opacity) == '%') {
        $opacity = unit($opacity, '') / 100
    }
    $data = s("data:image/svg+xml,<svg xmlns='http://www.w3.org/2000/svg'><defs><filter id='colorize' color-interpolation-filters='srgb'><fecolormatrix type='matrix' values='0 0 0 0 %s 0 0 0 0 %s 0 0 0 0 %s 0 0 0 %s 0' result='colorization'/><fecomposite in='colorization' in2='sourcegraphic' operator='over' k1='0' k2='1' k3='1' k4='0'/></filter></defs></svg>#colorize", $red, $green, $blue, $opacity);
    return grayscale(1) url($data)
}
-colorize-with-light-map($value) {
    return grayscale(1) contrast(200%) invert(1) -colorize($value, .75)
}

-encodehexcode($value) {
    $stringvalue = s("%s", $value)
    return '%23' + slice($stringvalue, 1) if substr($stringvalue, 0, 1) == '#'
    return $value
}

-default-unit($value, $unit) {
    return $value is a 'unit' ? unit($value, $unit) : $value
}

-not-null-or-default($value, $default) {
    return $value is a 'null' ? $default : $value
}

-color-or-else($value, $function = null) {
    return $value unless $value is a 'rgba'
    $function = -not-null-or-default($function, @($value) { $value })
    return $function($value)
}

invertify($color, $amount = 0) {
    error("invalid color: " + $color) unless $color is a 'rgba'
    error("invalid invertify amount: " + $amount) unless $amount is a 'unit'
    return $color if $amount == 0
    $fn = dark($color) ? lighten : darken
    return $fn($color, unit($amount) == '%' ? $amount : unit($amount * 5, '%'))
}

-sided($property, $sides = null, $args...) {
    if $sides is a 'null' {
        {$property}: $args
    } else {
        for $side in $sides {
            {$property}-{$side}: $args
        }
    }
}

fg($value = 0) {
    $value = transparent if $value is a 'null'
    $value = textcolor if $value == 0
    $value = invertify(textcolor, $value) if $value is a 'unit'
    return $value unless called-from is a 'null'
    return $value unless current-property is a 'null'
    color: $value
}
fgi($value = 0) {
    $value = transparent if $value is a 'null'
    $value = textcolor if $value == 0
    $value = invertify(textcolor, $value) if $value is a 'unit'
    return $value !important unless current-property is a 'null'
    return $value !important unless called-from is a 'null'
    color: $value !important
}

bg($value = 0) {
    $value = backgroundcolor if $value == 0
    $value = invertify(backgroundcolor, $value) if $value is a 'unit'
    return -not-null-or-default($value, transparent) unless called-from is a 'null'
    return -not-null-or-default($value, transparent) unless current-property is a 'null'
    background: -not-null-or-default($value, none)
}
bgi($value = 0) {
    $value = backgroundcolor if $value == 0
    $value = invertify(backgroundcolor, $value) if $value is a 'unit'
    return -not-null-or-default($value, transparent) !important unless current-property is a 'null'
    return -not-null-or-default($value, transparent) !important unless called-from is a 'null'
    background: -not-null-or-default($value, none) !important
}

bgc($value = 0) { -background-color($value) }
bgci($value = 0) { -background-color($value, !important) }
-background-color($value = 0, $rest...) {
    $value = backgroundcolor if $value == 0
    $value = invertify(backgroundcolor, $value) if $value is a 'unit'
    background-color: -not-null-or-default($value, transparent) $rest
}

p($size, $sides = null) { -padding($size, $sides) }
pi($size, $sides = null) { -padding($size, $sides, !important) }
-padding($size, $sides = null, $rest...) {
    $size = -not-null-or-default($size, 0px)
    $size = unit($size * 4, px) if ($size is a 'unit') and (unit($size) == '')
    -sided(padding, $sides, $size, $rest)
}

m($size, $sides = null) { -margin($size, $sides) }
mi($size, $sides = null) { -margin($size, $sides, !important) }
-margin($size, $sides = null, $rest...) {
    $size = -not-null-or-default($size, 0px)
    $size = unit($size * 4, px) if ($size is a 'unit') and (unit($size) == '')
    -sided(margin, $sides, $size, $rest)
}

b($color = textcolor, $sides = null, $width = 1px, $style = solid) { -border($color, $sides, $width, $style) }
bi($color = textcolor, $sides = null, $width = 1px, $style = solid) { -border($color, $sides, $width, $style, !important) }
-border($color = textcolor, $sides = null, $width = 1px, $style = solid, $rest...) {
    if $color is a 'null' {
        -sided(border, $sides, none, $rest)
    } else {
        -sided(border, $sides, $color, $width, $style, $rest)
    }
}

br($radius = null, $sidesandcorners = null) { -border-radius($radius, $sidesandcorners) }
bri($radius = null, $sidesandcorners = null) { -border-radius($radius, $sidesandcorners, !important) }
-border-radius($radius = null, $sidesandcorners = null, $rest...) {
    $radius = -not-null-or-default($radius, 0)
    $radius = unit($radius * 4, px) if ($radius is a 'unit') and (unit($radius) == '')
    if $sidesandcorners is a 'null' {
        border-radius: $radius $rest
    } else {
        $corners = ()
        for $sideorcorner, $i in $sidesandcorners {
            if $sideorcorner in (top bottom) {
                push($corners, s("%s-left", $sideorcorner))
                push($corners, s("%s-right", $sideorcorner))
            } else if $sideorcorner in (left right) {
                push($corners, s("top-%s", $sideorcorner))
                push($corners, s("bottom-%s", $sideorcorner))
            } else {
                push($corners, $sideorcorner)
            }
        }
        for $corner in $corners {
            border-{$corner}-radius: $radius $rest
        }
    }
}

o($value) { -opacity($value) }
oi($value) { -opacity($value, !important) }
-opacity($value, $rest...) {
    $value = -not-null-or-default($value, 0)
    $value = 1 - (($value * 5) / 100) if match('\.', s("%s", $value)) is a 'null'
    opacity: $value $rest
}

d($value) { -display($value) }
di($value) { -display($value, !important) }
-display($value, $rest...) {
    display: -not-null-or-default($value, none) $rest
}

w($width) { -width($width) }
wi($width) { -width($width, !important) }
-width($width, $rest...) {
    $width = unit($width * 4, px) if ($width is a 'unit') and (unit($width) == '')
    width: -not-null-or-default($width, 0px) $rest
}
h($height) { -height($height) }
hi($height) { -height($height, !important) }
-height($height, $rest...) {
    $height = unit($height * 4, px) if ($height is a 'unit') and (unit($height) == '')
    height: -not-null-or-default($height, 0px) $rest
}
wxh($width, $height = $width) { -size($width, $height) }
wxhi($width, $height = $width) { -size($width, $height, !important) }
-size($width, $height = $width, $rest...) {
    -width($width, $rest)
    -height($height, $rest)
}

bold() { font-weight: bold }

pointer() { cursor: pointer }

vendor($property, $args) {
    -webkit-{$property}: $args
    -moz-{$property}: $args
    {$property}: $args
}

appearance() {
    vendor(appearance, arguments)
}

icon($icon, $color = thm, $size = 24px) {
    $svg = url(s($icon, $size, $size, -encodehexcode($color)))
    return $svg unless current-property is a 'null'
    background-image: $svg
}

icons = {
    settings: "data:image/svg+xml;utf8, <svg xmlns='http://www.w3.org/2000/svg' height='%s' viewbox='0 0 24 24' width='%s'><path fill=%s d='m19.5,12c0-0.23-0.01-0.45-0.03-0.68l1.86-1.41c0.4-0.3,0.51-0.86,0.26-1.3l-1.87-3.23c-0.25-0.44-0.79-0.62-1.25-0.42 l-2.15,0.91c-0.37-0.26-0.76-0.49-1.17-0.68l-0.29-2.31c14.8,2.38,14.37,2,13.87,2h-3.73c9.63,2,9.2,2.38,9.14,2.88l8.85,5.19 c-0.41,0.19-0.8,0.42-1.17,0.68l5.53,4.96c-0.46-0.2-1-0.02-1.25,0.42l2.41,8.62c-0.25,0.44-0.14,0.99,0.26,1.3l1.86,1.41 c4.51,11.55,4.5,11.77,4.5,12s0.01,0.45,0.03,0.68l-1.86,1.41c-0.4,0.3-0.51,0.86-0.26,1.3l1.87,3.23c0.25,0.44,0.79,0.62,1.25,0.42 l2.15-0.91c0.37,0.26,0.76,0.49,1.17,0.68l0.29,2.31c9.2,21.62,9.63,22,10.13,22h3.73c0.5,0,0.93-0.38,0.99-0.88l0.29-2.31 c0.41-0.19,0.8-0.42,1.17-0.68l2.15,0.91c0.46,0.2,1,0.02,1.25-0.42l1.87-3.23c0.25-0.44,0.14-0.99-0.26-1.3l-1.86-1.41 c19.49,12.45,19.5,12.23,19.5,12z m12.04,15.5c-1.93,0-3.5-1.57-3.5-3.5s1.57-3.5,3.5-3.5s3.5,1.57,3.5,3.5s13.97,15.5,12.04,15.5z'/></svg>",
    edit: "data:image/svg+xml;utf8, <svg xmlns='http://www.w3.org/2000/svg' height='%s' viewbox='0 0 24 24' width='%s'><path d='m0 0h24v24h0v0z' fill='none'/><path fill=%s d='m3 17.46v3.04c0 .28.22.5.5.5h3.04c.13 0 .26-.05.35-.15l17.81 9.94l-3.75-3.75l3.15 17.1c-.1.1-.15.22-.15.36zm20.71 7.04c.39-.39.39-1.02 0-1.41l-2.34-2.34c-.39-.39-1.02-.39-1.41 0l-1.83 1.83 3.75 3.75 1.83-1.83z'/></svg>",
    morevert: "data:image/svg+xml;utf8, <svg xmlns='http://www.w3.org/2000/svg' height='%s' viewbox='0 0 24 24' width='%s'><path d='m0 0h24v24h0v0z' fill='none'/><path fill=%s d='m12 8c1.1 0 2-.9 2-2s-.9-2-2-2-2 .9-2 2 .9 2 2 2zm0 2c-1.1 0-2 .9-2 2s.9 2 2 2 2-.9 2-2-.9-2-2-2zm0 6c-1.1 0-2 .9-2 2s.9 2 2 2 2-.9 2-2-.9-2-2-2z'/></svg>",
    checkbox: "data:image/svg+xml;utf8, <svg xmlns='http://www.w3.org/2000/svg' height='%s' viewbox='0 0 24 24' width='%s'><path d='m0 0h24v24h0v0z' fill='none'/><path fill=%s d='m18 19h6c-.55 0-1-.45-1-1v6c0-.55.45-1 1-1h12c.55 0 1 .45 1 1v12c0 .55-.45 1-1 1zm1-16h5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2v5c0-1.1-.9-2-2-2z'/></svg>",
    checkboxchecked: "data:image/svg+xml;utf8, <svg xmlns='http://www.w3.org/2000/svg' height='%s' viewbox='0 0 24 24' width='%s'><path d='m0 0h24v24h0v0z' fill='none'/><path fill=%s d='m19 3h5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2v5c0-1.1-.9-2-2-2zm-8.29 13.29c-.39.39-1.02.39-1.41 0l5.71 12.7c-.39-.39-.39-1.02 0-1.41.39-.39 1.02-.39 1.41 0l10 14.17l6.88-6.88c.39-.39 1.02-.39 1.41 0 .39.39.39 1.02 0 1.41l-7.58 7.59z'/></svg>",
    close: "data:image/svg+xml;utf8, <svg xmlns='http://www.w3.org/2000/svg' height='%s' viewbox='0 0 24 24' width='%s'><path d='m0 0h24v24h0v0z' fill='none'/><path fill=%s d='m18.3 5.71c-.39-.39-1.02-.39-1.41 0l12 10.59 7.11 5.7c-.39-.39-1.02-.39-1.41 0-.39.39-.39 1.02 0 1.41l10.59 12 5.7 16.89c-.39.39-.39 1.02 0 1.41.39.39 1.02.39 1.41 0l12 13.41l4.89 4.89c.39.39 1.02.39 1.41 0 .39-.39.39-1.02 0-1.41l13.41 12l4.89-4.89c.38-.38.38-1.02 0-1.4z'/></svg>",
}
